// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id       String  @id @default(cuid())
    email    String  @unique
    username String  @unique
    name     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    image        UserImage?
    logoImages   LogoImage[]
    password     Password?
    roles        Role[]
    sessions     Session[]
    connections  Connection[]
    estimations  Estimate[]
    teams        Team[]
    pricelists   Pricelist[]
    models       TakeoffModel[]
    shared       Collaboration[]
    actions      UserAction[]
    // Added for Stripe
    customerId   String?         @unique
    subscription Subscription?
}

model UserImage {
    id          String  @id @default(cuid())
    altText     String?
    contentType String
    blob        Bytes

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String @unique
}

model Password {
    hash String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String @unique
}

model Session {
    id             String   @id @default(cuid())
    expirationDate DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String

    // non-unique foreign key
    @@index([userId])
}

model Permission {
    id          String @id @default(cuid())
    action      String // e.g. create, read, write, delete
    entity      String // e.g. note, user, etc.
    access      String // e.g. own or any
    description String @default("")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    roles Role[]

    @@unique([action, entity, access])
}

model Role {
    id          String @id @default(cuid())
    name        String @unique
    description String @default("")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users       User[]
    permissions Permission[]
}

model Verification {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    /// The type of verification, e.g. "email" or "phone"
    type String

    /// The thing we're trying to verify, e.g. a user's email or phone number
    target String

    /// The secret key used to generate the otp
    secret String

    /// The algorithm used to generate the otp
    algorithm String

    /// The number of digits in the otp
    digits Int

    /// The number of seconds the otp is valid for
    period Int

    /// The valid characters for the otp
    charSet String

    /// When it's safe to delete this verification
    expiresAt DateTime?

    @@unique([target, type])
}

model Connection {
    id           String @id @default(cuid())
    providerName String
    providerId   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String

    @@unique([providerName, providerId])
}

model Estimate {
    id          String  @id @default(cuid())
    name        String
    description String?
    /// JSON data for the estimation
    attributes  String?
    /// The status of the estimation, e.g. "draft", "submitted", "approved", "rejected"
    status      String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ownerId String

    teams          Team[]
    results        EstimateResults[]
    formData       EstimateFormData[]
    model          TakeoffModel?      @relation(fields: [takeoffModelId], references: [id])
    takeoffModelId String?

    prices Pricelist[]

    // non-unique foreign key
    @@index([ownerId])
    // This helps our order by in the user search a LOT
    @@index([ownerId, updatedAt])
}

model EstimateResults {
    id             String  @id @default(cuid())
    name           String
    priceLookupKey String
    qty            Float
    pricePerUnit   Float
    total          Float
    currency       String
    section        String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    estimate   Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    estimateId String

    @@unique([estimateId, name])
}

model EstimateFormData {
    id    String @id @default(cuid())
    name  String
    value String
    type  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    estimate   Estimate @relation(fields: [estimateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    estimateId String

    @@unique([estimateId, name])
}

model Team {
    id          String  @id @default(cuid())
    name        String
    description String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    members    User[]
    estimates  Estimate[]
    pricelists Pricelist[]
    models     TakeoffModel[]
}

model Pricelist {
    id          String  @id @default(cuid())
    name        String
    description String?
    supplier    String  @default("")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    items PricelistItem[]

    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ownerId String

    teams Team[]

    estimates Estimate[]
}

model PricelistItem {
    id           String @id @default(cuid())
    name         String
    pricePerUnit Float
    currency     String
    category     String
    unitType     String
    height       Float?
    width        Float?
    length       Float?

    createdAt DateTime @default(now())

    pricelist   Pricelist @relation(fields: [pricelistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    pricelistId String
}

model TakeoffModel {
    id          String  @id @default(cuid())
    name        String
    description String?
    code        String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    ownerId String

    teams Team[]

    inputs         CustomInputElement[]
    variables      CustomVariable[]
    estimates       Estimate[]
    printTemplates PrintTemplate[]
}

model CustomInputElement {
    id           String  @id @default(cuid())
    name         String
    description  String?
    type         String
    defaultValue String
    label        String
    props        String
    component    String?
    order        Int
    group        String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    takeoffModel   TakeoffModel @relation(fields: [takeoffModelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    takeoffModelId String
}

model CustomVariable {
    id                String  @id @default(cuid())
    name              String
    description       String?
    type              String
    value             String
    // Used to determine if it needs to be automatically garbage collected.
    isManuallyCreated Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    takeoffModel   TakeoffModel @relation(fields: [takeoffModelId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    takeoffModelId String

    @@unique([takeoffModelId, name])
}

model Collaboration {
    id          String @id @default(cuid())
    entityId    String
    entity      String // e.g. takeoff-model, pricelist
    accessLevel String // e.g. read, write, admin

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// A table to keep track user actions like creating, updating, deleting, etc.
model UserAction {
    id       String  @id @default(cuid())
    action   String
    entity   String
    entityId String
    // JSON data for the action
    data     String?
    duration Int?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String

    createdAt DateTime @default(now())
}

// ...
// Subscription Related Models.
// ...

// Plans are used to describe and group our Stripe Products.
model Plan {
    id            String         @id @unique
    name          String
    description   String?
    active        Boolean?       @default(true)
    limits        PlanLimit?
    prices        Price[]
    subscriptions Subscription[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

// Plan limits are used to describe the limits available to a plan.
model PlanLimit {
    id       String @id @default(cuid())
    plan     Plan   @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    planId   String @unique
    // Here you can define your own limits.
    // For example, you could have a limit on the number of items a user can create.
    maxItems Int    @default(0)
}

// Prices are used to identify our plan prices.
model Price {
    id            String         @id @unique // Managed by Stripe - (Price ID)
    plan          Plan           @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    planId        String
    amount        Int
    currency      String
    interval      String
    active        Boolean        @default(true)
    subscriptions Subscription[]
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

// Subscriptions are used to identify our customers subscriptions.
model Subscription {
    id                 String   @id @unique // Managed by Stripe - (Subscription ID)
    user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId             String   @unique
    plan               Plan     @relation(fields: [planId], references: [id])
    planId             String
    price              Price    @relation(fields: [priceId], references: [id])
    priceId            String
    interval           String
    status             String
    currentPeriodStart Int
    currentPeriodEnd   Int
    cancelAtPeriodEnd  Boolean  @default(false)
    createdAt          DateTime @default(now())
    updatedAt          DateTime @updatedAt
}

model PrintTemplate {
    id           String @id @default(cuid())
    name         String
    companyName  String
    companyInfo  String
    bodyTemplate String
    greeting     String

    logoImage      LogoImage?   @relation(fields: [logoImageId], references: [id])
    logoImageId    String?
    takeoffModel   TakeoffModel @relation(fields: [takeoffModelId], references: [id], onDelete: Cascade)
    takeoffModelId String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@index([takeoffModelId])
}

model LogoImage {
    id          String  @id @default(cuid())
    altText     String?
    contentType String
    blob        Bytes

    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    printTemplate PrintTemplate[]

    User          User?           @relation(fields: [userId], references: [id])
    userId        String?
}
